[{"title":"我的第一篇博客","url":"/2025/07/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","content":"我的第一篇博客经过我的不懈努力，我的个人博客终于也是上线了！耶✌✌✌\n","categories":["生活记录"],"tags":["生活记录"]},{"title":"ctfshow-MISC入门","url":"/2025/08/05/ctfshow-MISC%E5%85%A5%E9%97%A8/","content":"\n前言：博客创建这么久了，是时候发点内容了。\n聊聊近况：由于本人大一极度摆烂，暑假里想学点东西提升自己。整个七月份除了搭建好我的个人博客便是到处学，实在是有点操之过急了，最后也是感觉啥都没学会。总而言之，还是静下心慢慢来吧。也是先通过学习ctf拓展自己的知识面。\n其实大一刚入学便了解了ctf，但也仅限于了解。\n那么从现在开始吧。😊😊😊\n\n图片篇（基础操作）misc1解压后即可获取flag。\nmisc2解压后获得txt文本文件，打开后发现是乱码，开头显示“塒NG”直接猜测是png格式。直接修改获得flag。放入编辑器查看发现确实是PNG格式。\nmisc3解压后得到bpg格式文件。搜索后得知：\n\nBPG（Better Portable Graphics，更好的可移植图形）是一种新的图像格式。它的目的是在质量或文件大小有问题时替换jpeg图像格式。\n\n并且需要使用查看器进行查看。（我这里使用的是bandiview）查看后即可获得flag。\nmisc4解压后得到六个.txt文件。丢进010 editor查看文件头，再分别对文件格式进行修改，六张图结合起来便得到flag。\n\n\n图片篇（信息附加）misc5首先，拿到图片告知我”there_is_no_flag_here“.老样子丢进010 editor。拉到最下方flag便出现了。\nmisc6方法同misc5，通过搜索栏搜索ctfshow关键词即可找到。\nmisc7过程和第六题一模一样。😳\nmisc8查看属性，放入编辑器都没发现什么，于是丢进kali，使用binwalk发现存在多个文件，再使用foremost分离得到flag。\nmisc9同第六题。\nmisc10同样使用binwalk。\nmisc11几次尝试以后发现不行，查看wp，得知多了一个IDAT块。接下来自己尝试。\n先使用pngcheck发现确实有两个IDAT块。接着放进tweakpng中删除第一个IDAT再保存，最后得出flag。\n\nPNG 文件中的 IDAT 块通常是经过 Zlib 压缩的。每个 IDAT 块有固定的最大长度限制，一般为 65524 字节。当当前 IDAT 块存储的数据达到这个最大长度时，后续的数据就会存储到新的 IDAT 块中，新的 IDAT 块会按照顺序紧跟在前面的 IDAT 块之后，直到所有图像数据存储完毕。\n\n在这题，第一个IDAT块有所异常，删除即可。\nmisc12方法同misc11，爆出一堆IDAT块，但是要删除哪些呢，看完wp后得知删除前八个。（困惑？）\nmisc13上述方法用完后发现不行，然后在编辑器中发现”ct¹f…s†hªoKw“字样。\n使用脚本：\na=&quot;631A74B96685738668AA6F4B77B07B216114655336A5655433346578612534DD38EF66AB35103195381F628237BA6545347C3254647E373A64E465F136FA66F5341E3107321D665438F1333239E9616C7D&quot;flag=&quot;&quot;for i in range(0,len(a),4):    hexStr=a[i:i+2]    flag+=chr(int(&quot;0x&quot;+hexStr,16))print(flag)\n\n输出flag\nmisc14使用binwalk发现藏有文件，提取不出来，foremost也无法提取，这里手动提取，搜索FF D8 FF文件头。获得flag。\nmisc15老样子010 editor\nmisc16binwalk分离即可\nmisc17没做出来，看的别人的wp。\n首先，使用zsteg。得到如下：\n\n显示有额外的3544字节在zlib流之后。\n之后我们提取出来。zsteg -e extradata:0 misc17.png &gt; flag.txt。发现文本中并没有flag\n随后binwalk分离一下，最后得到flag。\nmisc18题目提示flag在标题、作者、照相机和镜头型号里，考察查阅EXIF信息。\n这里直接使用exiftool查看或者查看属性都能得到。\nmisc19exiftool即可。\nmisc20exiftool一下。comment一行中有内容：”这图片也太难看了。来自：西替爱抚秀大括号西九七九六四必一诶易西爱抚零六易一弟七九西二一弟弟诶弟五九三易四二大括号“。也就是ctfshow{c97964b1aecf06e1d79c21ddad593e42}\nmisc21exiftool一下，题目提示：**flag在序号里。**有内容：”Serial Number  : 686578285826597329“，这一眼不是flag，于是尝试十六进制转ASCII码得到：hex(X&amp;Ys)。于是猜测与X,Y相关内容有关，刚好爆出的内容有。X Resolution : 3902939465；Y Resolution : 2371618619；X Position : 1082452817；Y Position : 2980145261。分别转换再拼接起来即可。\nmisc22没做出来，看完wp得知是thumbnail隐写。\n\n然后便得到一个荧光色的flag\nmisc23题目提示：flag在时间里。exiftool一下。\n（因提示关注到此行，然后便不知道干嘛了）查看wp后得知：先将时间转化为时间戳。得到如下：\n\n87486582226992376882156662245460377706\n\n接着转为为十六进制即可得到flag。\nmisc41这题蛮有意思，题目提示”H4ppy Apr1l F001’s D4y！“在编辑器中搜索F001,即可显示出flag。\n图片篇（文件结构）misc24题目提示：”flag在图片上面“。猜测要修改高度。修改后得到flag。\nmisc25依旧修改高度，但这次是png文件。\nmisc26依旧修改高度。并使用脚本获取正确高度值。\nimport binasciiimport struct   crcbp = open(&quot;misc26.png&quot;, &quot;rb&quot;).read()    #打开图片crc32frombp = int(crcbp[29:33].hex(),16)     #读取图片中的CRC校验值print(crc32frombp) for i in range(4000):                        #宽度1-4000进行枚举    for j in range(4000):                    #高度1-4000进行枚举        data = crcbp[12:16] + \\            struct.pack(&#x27;&gt;i&#x27;, i)+struct.pack(&#x27;&gt;i&#x27;, j)+crcbp[24:29]        crc32 = binascii.crc32(data) &amp; 0xffffffff        # print(crc32)        if(crc32 == crc32frombp):            #计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定            print(i, j)            print(&#x27;hex:&#x27;, hex(i), hex(j))            exit(0)\n\n高度为0x25e，flag内容需结合高度。\nmisc27依旧修改高度。\nmisc28这次是gif图，注意要修改两处。\n\nmisc29由于是gif图这里可以修改11处得到flag。修改完后有一帧能得到flag。\nmisc30修改宽度的题。题目说正确的宽度是950，转换为十六进制是3B6.这里注意：\n\nBMP格式采用小端序存储数据：低位字节在前，高位字节在后。\n如PNG格式采用大端序存储数据：高位字节在前，低位字节在后。\n\n如下：\n\n","categories":["CTF"],"tags":["MISC","CTF"]}]